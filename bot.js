const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
require('dotenv').config();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
let data = {};
if (fs.existsSync('data.json')) {
  data = JSON.parse(fs.readFileSync('data.json'));
} else {
  data = { inventory: {}, balance: { cash: 0, card: 0, oleg: 0 } };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ
const calculateInventoryValue = (inventory) => {
  let totalValue = 0;

  Object.keys(inventory).forEach((brand) => {
    Object.keys(inventory[brand].flavors).forEach((flavor) => {
      const quantity = inventory[brand].flavors[flavor].quantity;
      const price = inventory[brand].flavors[flavor].price;
      totalValue += quantity * price; // –î–æ–¥–∞—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–º–∞–∫—É
    });
  });

  return totalValue;
};


// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
const mainMenu = {
  reply_markup: {
    inline_keyboard: [
      [{ text: '–î–æ–¥–∞—Ç–∏ —Ä—ñ–¥–∏–Ω—É', callback_data: 'add_liquid' }],
      [{ text: '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', callback_data: 'view_inventory' }],
      [{ text: '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å', callback_data: 'view_balance' }],
      [{ text: '–ü—Ä–æ–¥–∞—Ç–∏ —Ä—ñ–¥–∏–Ω—É', callback_data: 'sell_liquid' }],
      [{ text: '–°–ø–∏—Å–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π', callback_data: 'deduct_money' }],
      [{ text: '–°–ø–∏—Å–∞–Ω–Ω—è —Ä—ñ–¥–∏–Ω', callback_data: 'deduct_liquid' }],
      [{ text: '–°–ø–∏—Å–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π –¥–ª—è –û–ª–µ–≥–∞', callback_data: 'deduct_oleg' }],
    ]
  }
};

// –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç—É
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤—ñ—Ç! –û—Å—å –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é:', mainMenu);
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
const sendMainMenu = (chatId) => {
  bot.sendMessage(chatId, '–û—Å—å –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é:', mainMenu);
};

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (callbackQuery) => {
  const message = callbackQuery.message;
  const chatId = message.chat.id;
  const action = callbackQuery.data;

  switch (action) {
    case 'deduct_oleg':
      bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –∑ –±–∞–ª–∞–Ω—Å—É –û–ª–µ–≥–∞');
      bot.once('message', (deductMsg) => {
        const deductAmount = parseFloat(deductMsg.text);
        if (isNaN(deductAmount) || deductAmount <= 0) {
          bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É —Å—É–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è.');
          return sendMainMenu(chatId);
        }

        if (data.balance.oleg >= deductAmount) {
          data.balance.oleg -= deductAmount;
          fs.writeFileSync('data.json', JSON.stringify(data, null, 2));
          bot.sendMessage(chatId, `–°—É–º–∞ ${deductAmount} –≥—Ä–Ω —É—Å–ø—ñ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–∞ –∑ –±–∞–ª–∞–Ω—Å—É –û–ª–µ–≥–∞.`);
        } else {
          bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ –û–ª–µ–≥–∞.');
        }

        sendMainMenu(chatId); // –ü—ñ—Å–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
      });
      break;

    // Example for handling invalid input in the 'add_liquid' case
    case 'add_liquid':
      bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –±—Ä–µ–Ω–¥ —Ä—ñ–¥–∏–Ω–∏');
      bot.once('message', (brandMsg) => {
        const brand = brandMsg.text.trim();

        if (!brand) {
          bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –±—Ä–µ–Ω–¥ —Ä—ñ–¥–∏–Ω–∏.');
          return sendMainMenu(chatId);
        }

        bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ 1 —à—Ç –¥–ª—è —Ä—ñ–¥–∏–Ω–∏ –±—Ä–µ–Ω–¥—É ${brand}`);
        bot.once('message', (priceMsg) => {
          const salePrice = parseFloat(priceMsg.text);

          if (isNaN(salePrice) || salePrice <= 0) {
            bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ü—ñ–Ω–∏.');
            return sendMainMenu(chatId);
          }

          bot.sendMessage(chatId, `–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –æ—Ç—Ä–∏–º–∞—î –û–ª–µ–≥ –∑–∞ –∫–æ–∂–Ω—É —Ä—ñ–¥–∏–Ω—É –±—Ä–µ–Ω–¥—É ${brand}`);
          bot.once('message', (olegEarningsMsg) => {
            const olegEarnings = parseFloat(olegEarningsMsg.text);

            if (isNaN(olegEarnings) || olegEarnings <= 0) {
              bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É —Å—É–º—É –¥–ª—è –û–ª–µ–≥–∞.');
              return sendMainMenu(chatId);
            }

            bot.sendMessage(chatId, `–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Å–º–∞–∫ —Ä—ñ–¥–∏–Ω–∏ –¥–ª—è –±—Ä–µ–Ω–¥—É ${brand}`);
            bot.once('message', (flavorMsg) => {
              const flavor = flavorMsg.text.trim();

              if (!flavor) {
                bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–º–∞–∫ —Ä—ñ–¥–∏–Ω–∏.');
                return sendMainMenu(chatId);
              }

              // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö (brand, salePrice, olegEarnings, flavor)
              bot.sendMessage(chatId, `–¶—ñ–Ω–∞ –¥–ª—è –±—Ä–µ–Ω–¥—É ${brand} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${salePrice} –≥—Ä–Ω –∑–∞ 1 —à—Ç. –û–ª–µ–≥ –æ—Ç—Ä–∏–º–∞—î ${olegEarnings} –≥—Ä–Ω –∑–∞ –∫–æ–∂–Ω—É —Ä—ñ–¥–∏–Ω—É.`);
              sendMainMenu(chatId);
            });
          });
        });
      });
      break;

    case 'sell_liquid':
      bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ —Ä—ñ–¥–∏–Ω–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É');
      bot.once('message', (brandMsg) => {
        const brand = brandMsg.text;
        if (!data.inventory[brand]) {
          bot.sendMessage(chatId, '–¶–µ–π –±—Ä–µ–Ω–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.');
          return sendMainMenu(chatId);
        }

        bot.sendMessage(chatId, `–í–∏–±–µ—Ä—ñ—Ç—å —Å–º–∞–∫ —Ä—ñ–¥–∏–Ω–∏ –¥–ª—è –±—Ä–µ–Ω–¥—É ${brand}`);
        bot.once('message', (flavorMsg) => {
          const flavor = flavorMsg.text;
          if (!data.inventory[brand].flavors[flavor]) {
            bot.sendMessage(chatId, '–¶–µ–π —Å–º–∞–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è —Ü—å–æ–≥–æ –±—Ä–µ–Ω–¥—É.');
            return sendMainMenu(chatId);
          }

          bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Å–º–∞–∫—É ${flavor} –±—Ä–µ–Ω–¥—É ${brand}`);
          bot.once('message', (quantityMsg) => {
            const quantity = parseInt(quantityMsg.text);

            if (isNaN(quantity) || quantity <= 0) {
              bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å.');
              return;
            }

            const currentQuantity = data.inventory[brand].flavors[flavor].quantity;

            if (quantity > currentQuantity) {
              bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–∞ —Å–∫–ª–∞–¥—ñ.');
              return;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—ñ–¥–∏–Ω–∏ –≤ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—ñ
            data.inventory[brand].flavors[flavor].quantity -= quantity;

            // –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—ñ–¥–∏–Ω–∏ —Å—Ç–∞–ª–∞ 0, –≤–∏–¥–∞–ª—è—î–º–æ —ó—ó –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É
            if (data.inventory[brand].flavors[flavor].quantity === 0) {
              delete data.inventory[brand].flavors[flavor];
              bot.sendMessage(chatId, `–°–º–∞–∫ ${flavor} –¥–ª—è –±—Ä–µ–Ω–¥—É ${brand} –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ.`);
            }

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            const salePrice = data.inventory[brand].price * quantity;
            const olegEarnings = data.inventory[brand].olegPrice * quantity;

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
            bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ (–≥–æ—Ç—ñ–≤–∫–∞ –∞–±–æ –∫–∞—Ä—Ç–∫–∞)', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '–ì–æ—Ç—ñ–≤–∫–∞', callback_data: `cash_${salePrice}_${olegEarnings}` }],
                  [{ text: '–ö–∞—Ä—Ç–∫–∞', callback_data: `card_${salePrice}_${olegEarnings}` }]
                ]
              }
            });
          });
        });
      });
      break;

    case 'view_inventory':
      let inventoryMessage = '–ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ä—ñ–¥–∏–Ω:\n';

      // –Ü—Ç–µ—Ä—É—î–º–æ —á–µ—Ä–µ–∑ –∫–æ–∂–µ–Ω –±—Ä–µ–Ω–¥ —Ç–∞ —Å–º–∞–∫
      Object.keys(data.inventory).forEach((brand) => {
        Object.keys(data.inventory[brand].flavors).forEach((flavor) => {
          const quantity = data.inventory[brand].flavors[flavor].quantity;
          const price = data.inventory[brand].flavors[flavor].price;
          const olegEarnings = data.inventory[brand].flavors[flavor].olegPrice;

          inventoryMessage += `üîπ –ë—Ä–µ–Ω–¥: ${brand}
      ü•∞ –°–º–∞–∫: ${flavor}, üîπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity}, üîπ –¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é: ${price} –≥—Ä–Ω, üîπ –°—É–º–∞ –¥–ª—è –û–ª–µ–≥–∞ –∑–∞ 1 —à—Ç: ${olegEarnings} –≥—Ä–Ω\n`;
        });
      });

      bot.sendMessage(chatId, inventoryMessage);
      sendMainMenu(chatId);
      break;

    case 'view_balance':
      // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–≤–æ–¥—É –±–∞–ª–∞–Ω—Å—É
      const balanceMessage = `üí∞ –ë–∞–ª–∞–Ω—Å:
        –ì–æ—Ç—ñ–≤–∫–∞: ${data.balance.cash} –≥—Ä–Ω
        –ö–∞—Ä—Ç–∫–∞: ${data.balance.card} –≥—Ä–Ω
        –û–ª–µ–≥: ${data.balance.oleg} –≥—Ä–Ω
      
        üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${data.balance.cash + data.balance.card - data.balance.oleg} –≥—Ä–Ω
        üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ: ${calculateInventoryValue(data.inventory)} –≥—Ä–Ω`;

      bot.sendMessage(chatId, balanceMessage);
      sendMainMenu(chatId);
      break;

    case 'deduct_money':
      bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è');
      bot.once('message', (msg) => {
        const amount = parseFloat(msg.text);
        if (isNaN(amount) || amount <= 0) {
          bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É —Å—É–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è.');
          return sendMainMenu(chatId);
        }
        if (data.balance.cash >= amount) {
          data.balance.cash -= amount;
          fs.writeFileSync('data.json', JSON.stringify(data, null, 2));
          bot.sendMessage(chatId, `–°—É–º–∞ ${amount} –≥—Ä–Ω —É—Å–ø—ñ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–∞ –∑ –≥–æ—Ç—ñ–≤–∫–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É.`);
        } else {
          bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –≥–æ—Ç—ñ–≤–∫–æ–≤–æ–º—É –±–∞–ª–∞–Ω—Å—ñ.');
        }
        sendMainMenu(chatId);
      });
      break;

    case 'deduct_liquid':
      bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ —Ä—ñ–¥–∏–Ω–∏ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è');
      bot.once('message', (brandMsg) => {
        const brand = brandMsg.text;
        if (!data.inventory[brand]) {
          bot.sendMessage(chatId, '–¶–µ–π –±—Ä–µ–Ω–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.');
          return sendMainMenu(chatId);
        }

        bot.sendMessage(chatId, `–í–∏–±–µ—Ä—ñ—Ç—å —Å–º–∞–∫ —Ä—ñ–¥–∏–Ω–∏ –¥–ª—è –±—Ä–µ–Ω–¥—É ${brand}`);
        bot.once('message', (flavorMsg) => {
          const flavor = flavorMsg.text;
          if (!data.inventory[brand].flavors[flavor]) {
            bot.sendMessage(chatId, '–¶–µ–π —Å–º–∞–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è —Ü—å–æ–≥–æ –±—Ä–µ–Ω–¥—É.');
            return sendMainMenu(chatId);
          }

          bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—ñ–¥–∏–Ω–∏ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –∑—ñ —Å–∫–ª–∞–¥—É`);
          bot.once('message', (quantityMsg) => {
            const quantity = parseInt(quantityMsg.text);

            if (isNaN(quantity) || quantity <= 0) {
              bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å.');
              return;
            }

            const currentQuantity = data.inventory[brand].flavors[flavor].quantity;

            if (quantity > currentQuantity) {
              bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–∞ —Å–∫–ª–∞–¥—ñ.');
              return;
            }

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—ñ–¥–∏–Ω–∏ –≤ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—ñ
            data.inventory[brand].flavors[flavor].quantity -= quantity;

            // –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—ñ–¥–∏–Ω–∏ —Å—Ç–∞–ª–∞ 0, –≤–∏–¥–∞–ª—è—î–º–æ —ó—ó –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É
            if (data.inventory[brand].flavors[flavor].quantity === 0) {
              delete data.inventory[brand].flavors[flavor];
              bot.sendMessage(chatId, `–°–º–∞–∫ ${flavor} –¥–ª—è –±—Ä–µ–Ω–¥—É ${brand} –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ.`);
            }

            fs.writeFileSync('data.json', JSON.stringify(data, null, 2));

            bot.sendMessage(chatId, `–†—ñ–¥–∏–Ω–∞ ${flavor} –±—Ä–µ–Ω–¥—É ${brand} —Å–ø–∏—Å–∞–Ω–∞ –∑—ñ —Å–∫–ª–∞–¥—É.`);
            sendMainMenu(chatId);
          });
        });
      });
      break;

    default:
      sendMainMenu(chatId);
  }
});
